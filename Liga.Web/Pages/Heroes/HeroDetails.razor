@page "/heroes/details/{Id:int}"
@inject IRepository _repository
@inject NavigationManager _navigationManager
@inject SweetAlertService _sweetAlertService

<h3>Details Hero</h3>

@if (Hero is null)
{
    <div class="align-items-center">
        <img src="https://media0.giphy.com/media/xTk9ZvMnbIiIew7IpW/200w.gif?cid=6c09b9528no5zf72rmxxgit8qceadsnx97ckl8uy7jw4bbsl&rid=200w.gif&ct=g" />
    </div>
}
else
{
    <br/>
    <div class="row">
        <div class="col-md-4">
            <h2>Hero</h2>
            @Hero.Name
        </div>
        <div class="col-md-4">
            <h2>Power</h2>
            @Hero.Power
        </div>
        <div class="col-md-4">
            <h2>Weakness</h2>
            @Hero.Weaknesses.FirstOrDefault()!.Weak
        </div>
    </div>
    <div>
        <br/>
@*        <a class="btn btn-info" href="/heroes/details/@Item.Id">Edit</a>*@
        <a class="btn btn-outline-success" href="/heroes">Volver</a>
    </div>
}

@code {

    public Hero? Hero;

    [Parameter]
    public int Id { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await _repository.Get<Hero>($"api/heroes/{Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                _navigationManager.NavigateTo("/heroes");
                return;

            }

            var message = await responseHttp.GetErrorMessageAsync();
            await _sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        Hero = responseHttp.Response;
    }
}
